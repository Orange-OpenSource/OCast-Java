/*
 * Software Name : OCast SDK
 *
 *  Copyright (C) 2017 Orange
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        maven { url "https://maven.google.com" }
        google()
    }
    dependencies {
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'com.android.tools.build:gradle:3.3.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1'
    }
    properties.each { prop ->
        project.ext.set(prop.key, prop.value)
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://maven.google.com" }
        google()
    }
}

def javaProjects = [
        project(':core'),
        project(':discovery'),
        project(':referencedriver')
]

def exportedProjects = javaProjects + project(':mediaroute')

project.ext {
    min_sdk_version = 14
    compile_sdk_version = 27
    target_sdk_version = 27

    versionSupportLibrary = '27.1.1'

    pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        organization {
            name "Orange Labs"
            url "www.ocast.org"
        }

        scm {
            url "https://github.com/Orange-OpenSource/OCast-Java.git"
        }
    }
}

configure(exportedProjects) {
    apply plugin: 'maven-publish'

    configurations {
        doclava
        doclavacp
    }

    dependencies {
        doclava 'com.google.doclava:doclava:1.0.6'
        doclavacp 'com.google.code.findbugs:jsr305:3.0.1'
    }

    group = "org.ocast"
    version = "1.0.5"
}

configure(project(":mediaroute")) {
    apply plugin: 'com.android.library'
    apply from: "../publish.gradle"

    task javadoc(type: Javadoc) {
        failOnError false
        title null
        options.doclet = "com.google.doclava.Doclava"
        options.docletpath = configurations.doclava.files.asType(List)
        options.classpath += configurations.doclavacp.files.asType(List)
        source = android.sourceSets.main.java.srcDirs
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    publishing.publications {
        android.libraryVariants.all { variant ->
            if (variant.buildType.name == "release") {

                mavenJava(MavenPublication) {
                    groupId project.group
                    artifactId 'mediaroute'
                    version project.version
                    artifact variant.outputs[0].packageLibrary
                    artifact sourcesJar
                    artifact javadocJar

                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        def root = asNode()
                        root.appendNode('description', 'Android MediaRouter support for OCast SDK')
                        root.appendNode('name', 'ocast-mediaroute')
                        root.children().last() + pomConfig
                        configurations.implementation.allDependencies.each {
                            if (it.group == null) return
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

configure(javaProjects) {
    apply plugin: 'java'
    apply from: "../publish.gradle"

    jar {
        from "$rootDir/LICENSE"
        manifest {
            attributes 'Implementation-Title': 'ocast-' + project.name,
                    'Implementation-Version': version,
                    'Implementation-Vendor': 'Orange Labs'
        }
    }

    javadoc {
        failOnError false
        title null
        options.doclet = "com.google.doclava.Doclava"
        options.docletpath = configurations.doclava.files.asType(List)
        options.classpath += configurations.doclavacp.files.asType(List)
        source sourceSets.main.allJava
    }

    jar {
        from "$rootDir/LICENSE"
        manifest {
            attributes 'Implementation-Title': 'ocast-' + project.name,
                    'Implementation-Version': version,
                    'Implementation-Vendor': 'Orange Labs'
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    publishing.publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.name + ' library of the OCast SDK')
                root.appendNode('name', 'ocast-' + project.name)
                root.children().last() + pomConfig
            }
        }
    }
}

gradle.projectsEvaluated {
    apply plugin: "org.sonarqube"

    configurations {
        doclava
        doclavacp
    }

    dependencies {
        doclava 'com.google.doclava:doclava:1.0.6'
        doclavacp 'com.google.code.findbugs:jsr305:3.0.1'
    }

    task alljavadoc(type: Javadoc, group: "Documentation") {
        description = 'Generates a global javadoc from all the modules'
        source exportedProjects.collect {
            if (it.plugins.hasPlugin('com.android.library') && it.android.hasProperty('sourceSets')) {
                it.android.sourceSets.main.java.srcDirs
            } else if (it.hasProperty('sourceSets')) {
                it.sourceSets.main.allJava
            }
        }

        failOnError false
        title null
        options.doclet = "com.google.doclava.Doclava"
        options.docletpath = configurations.doclava.files.asType(List)
        options.classpath += configurations.doclavacp.files.asType(List)
        destinationDir = file("$rootDir/docs")
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
